#+TITLE: Qtile Config
#+PROPERTY: header-args :tangle config.py

* TABLE OF CONTENTS :toc:
- [[#about][About]]
- [[#imports][IMPORTS]]
- [[#variables][VARIABLES]]
- [[#keybindings][KEYBINDINGS]]
  - [[#qtile-controls][Qtile Controls]]
  - [[#system-controls][System Controls]]
  - [[#applications-launcher][Applications launcher]]
- [[#groups][GROUPS]]
- [[#layouts][LAYOUTS]]
- [[#colours][COLOURS]]
- [[#prompt][PROMPT]]
- [[#widgets][WIDGETS]]
- [[#bar--screens][BAR & SCREENS]]
- [[#drag-floating-windows][DRAG FLOATING WINDOWS]]
- [[#startup-applications][STARTUP APPLICATIONS]]
- [[#wmname][WMNAME]]

* About
#+CAPTION: Qtile Screenshot
#+ATTR_HTML: :alt Qtile Screenshot :title A Brief Look :align left
[[https://github.com/david35mm/.files/blob/main/.config/qtile/qtile.png]]

This config file was modified by David Salom√≥n on Jun 18, 2021 at 7:29 pm (Bogota DC, Colombia UTC-5).
- My YouTube Channel: https://9m.no/ëÖÅÌÖö
- My Instagram Page: https://www.instagram.com/david.35mm
- My GitHub: https://github.com/david35mm
- My Photography Portfolio: https://adobe.ly/32jk5W6

It's important to keep in mind that this config is based on [[https://gitlab.com/dwt1/dotfiles/-/tree/master/.config/qtile][Derek Taylor's]] one and also some of the ideas were taken from various post on [[https://www.reddit.com/r/unixporn/][r/unixporn]].
- The YouTube Channel of Derek Taylor (DistroTube): http://www.youtube.com/c/DistroTube
- Derek Taylor GitLab: https://gitlab.com/dwt1
- r/unixporn on Reddit: https://reddit.com/r/unixporn

* IMPORTS
These are some libraries that Qtile needs to make the widgets, layouts and all of the rest to work.

#+BEGIN_SRC python
import os
import re
import socket
import subprocess
from libqtile import bar, hook, layout, qtile, widget
from libqtile.config import EzClick as Click, EzDrag as Drag, EzKey as Key, Group, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
from typing import List
#+END_SRC

* VARIABLES
Here I have set some variables so that you can set your default programs. If some of you guys want to install the Brave Web Browser, do it with my referral link please. https://brave.com/gek146
#+BEGIN_SRC python
mod = "mod4"
myTerm = guess_terminal()
myBrowser = "brave-browser"
myFileManager = "pcmanfm"
myMarkdown = "marktext"
myMusicPlayer = myTerm+" -e cmus"
myOfficeSuite = "desktopeditors"
myPDFReader = "zathura"
myTextEditor = "subl"
#+END_SRC

* KEYBINDINGS
Here's a detailed table with my keybindings.
Important: I like to use the Windows key as the Super key (which in the config file is known as ~mod4~).
If for some weird reason you are one of those persons who likes to use the Alt key instead of the Super key, change the mod variable in the config file to ~mod1~.

** Qtile Controls
| Keybinding           | Action                                                     |
|----------------------+------------------------------------------------------------|
| MODKEY + CONTROL + r | Restarts Qtile                                             |
| MODKEY + CONTROL + q | Close Qtile                                                |
| MODKEY + k           | Switch focus between windows (down)                        |
| MODKEY + j           | Switch focus between windows (up)                          |
| MODKEY + SHIFT + k   | Changes window position in the current layout (down)       |
| MODKEY + SHIFT + j   | Changes window position in the current layout (up)         |
| MODKEY + SPACE       | Switch focus between windows (clockwise)                   |
| MODKEY + SHIFT + f   | Changes the side of the master and slave stack             |
| MODKEY + SHIFT + l   | Expand size of window                                      |
| MODKEY + l           | Expand size of master window (only on MonadTall layout)    |
| MODKEY + SHIFT + h   | Shrink size of window                                      |
| MODKEY + h           | Shrink size of master window (only on MonadTall layout)    |
| MODKEY + n           | Normalizes the size of the window with focus               |
| MODKEY + TAB         | Rotates through the available layouts                      |
| MODKEY + w           | Closes the window with focus                               |
| MODKEY + f           | Put the focused window on floating mode.                   |
| MODKEY + s           | Put the focused window on fullscreen mode                  |
| MODKEY + PERIOD      | Focus the next screen (usually the one at the right)       |
| MODKEY + COMMA       | Focus the previous screen (usually the one at the left)    |
| MODKEY + 1-9         | Switch focus to workspace (1-9)                            |
| MODKEY + SHIFT + 1-9 | send focused window to workspace (1-9)                     |

** System Controls
| Keybinding            | Action                                |
|-----------------------+---------------------------------------|
| XF86AudioLowerVolume  | Decrease the volume                   |
| XF86AudioRaiseVolume  | Increase the volume                   |
| XF86AudioMute         | Turn the volume off                   |
| XF86MonBrightnessDown | Decrease the brightness of the screen |
| XF86MonBrightnessUp   | Increase the brightness of the screen |

*Advice*: If for some reason your keyboard doesn't have the brightness control keys, don't worry, I got you. I've set two alternative keybindings to control the brightness through your keyboard:

| Keybinding | Action                                |
|------------+---------------------------------------|
| ALT + k    | Increase the brightness of the screen |
| ALT + j    | Decrease the brightness of the screen |

** Applications launcher
| Keybinding                       | Action                                                                                   |
|----------------------------------+------------------------------------------------------------------------------------------|
| MODKEY + r                       | Opens the Desktop File Application Launcher ([[https://github.com/davatorium/rofi/blob/next/INSTALL.md#install-distribution][rofi]])                                       |
| MODKEY + ALT + r                 | Opens the Application Launcher (with rofi as well)                                       |
| ALT + Tab                        | Opens the Window Switcher, like the one on Windows but better (it's rofi one more time.) |
| MODKEY + ALT + i                 | Opens the Web Browser ([[https://brave.com/gek146][Brave Browser]])                                                    |
| MODKEY + e                       | Opens the File Manager ([[https://wiki.lxde.org/en/PCManFM][PCManFM]])                                                         |
| MODKEY + ALT + d                 | Opens the Markdown Editor ([[https://marktext.app/][Mark Text]])                                                    |
| MODKEY + ALT + m                 | Opens the Music Player ([[https://cmus.github.io/][cmus]])                                                            |
| MODKEY + ALT + o                 | Opens the Office Suite ([[https://www.onlyoffice.com/download-desktop.aspx][OnlyOffice]])                                                      |
| MODKEY + ALT + p                 | Opens the PDF Reader ([[https://pwmt.org/projects/zathura/][Zathura]])                                                           |
| MODKEY + RETURN (RETURN = ENTER) | Opens the Terminal Emulator (It automatically detects your installed terminal)           |
| MODKEY + ALT + t                 | Opens the Text Editor ([[https://www.sublimetext.com/docs/3/linux_repositories.html][Sublime Text]])                                                     |
| MODKEY + ALT + e                 | Opens the Terminal-Based File Manager ([[https://github.com/vifm/vifm][vifm]])                                             |
| MODKEY + ALT + s                 | Opens [[https://www.spotify.com/co/download/linux][Spotify]]                                                                            |
| MODKEY + ALT + g                 | Opens [[https://store.steampowered.com/about][Steam]]                                                                              |
| MODKEY + ALT + v                 | Opens [[https://www.videolan.org/vlc/#download][VLC]]                                                                                |

#+BEGIN_SRC python
keys = [
	# Qtile Controls
	Key("M-C-r", lazy.restart()),
	Key("M-C-q", lazy.shutdown()),

	# Window and Layout Controls
	Key("M-k", lazy.layout.down()),
	Key("M-j", lazy.layout.up()),
	Key("M-S-k", lazy.layout.shuffle_down()),
	Key("M-S-j", lazy.layout.shuffle_up()),
	Key("M-<space>", lazy.layout.next()),
	Key("M-S-f", lazy.layout.flip()),
	Key("M-S-l", lazy.layout.grow()),
	Key("M-l", lazy.layout.grow_main()),
	Key("M-S-h", lazy.layout.shrink()),
	Key("M-h", lazy.layout.shrink_main()),
	Key("M-n", lazy.layout.normalize()),
	Key("M-<Tab>", lazy.next_layout()),
	Key("M-w", lazy.window.kill()),
	Key("M-f", lazy.window.toggle_floating()),
	Key("M-s", lazy.window.toggle_fullscreen()),
	Key("M-<period>", lazy.next_screen()),
	Key("M-<comma>", lazy.prev_screen()),

	# System Controls
	Key("<XF86AudioLowerVolume>", lazy.spawn("amixer -M set Master 5%- unmute")),
	Key("<XF86AudioRaiseVolume>", lazy.spawn("amixer -M set Master 5%+ unmute")),
	Key("<XF86AudioMute>", lazy.spawn("amixer -M set Master toggle")),
	Key("<XF86MonBrightnessDown>", lazy.spawn("brightnessctl set 10%-")),
	Key("<XF86MonBrightnessUp>", lazy.spawn("brightnessctl set 10%+")),
	Key("A-j", lazy.spawn("brightnessctl set 10%-")),
	Key("A-k", lazy.spawn("brightnessctl set 10%+")),

	# Applications launcher
	Key("M-r", lazy.spawn("rofi -show drun")),
	Key("M-A-r", lazy.spawn("rofi -show run")),
	Key("A-<Tab>", lazy.spawn("rofi -show window")),
	Key("M-A-i", lazy.spawn(myBrowser)),
	Key("M-e", lazy.spawn(myFileManager)),
	Key("M-A-d", lazy.spawn(myMarkdown)),
	Key("M-A-m", lazy.spawn(myMusicPlayer)),
	Key("M-A-o", lazy.spawn(myOfficeSuite)),
	Key("M-A-p", lazy.spawn(myPDFReader)),
	Key("M-<Return>", lazy.spawn(myTerm)),
	Key("M-A-t", lazy.spawn(myTextEditor)),
	Key("M-A-e", lazy.spawn(myTerm + ' -e vifm')),
	Key("M-A-s", lazy.spawn("spotify")),
	Key("M-A-g", lazy.spawn("steam")),
	Key("M-A-v", lazy.spawn("vlc")),
]
#+END_SRC

* GROUPS
For some reason Qtile decided to call them groups, but basically they are workspaces.
Feel free to change the names and default layouts on the ~groups~ section. As another thing that I recently discovered in the last Qtile update, I have set some rules for certain windows to open in a specific groups. eg: Brave-browser will always open in the ~web~ workspace, vlc will open in the ~media~ workspace... You get the idea. If you want to add more rules I strongly advice you to run: ~xprop WM_CLASS~.

#+BEGIN_SRC python
groups = [
	Group("web", layout="max", matches=[Match(wm_class=["Brave-browser", "Min"])]),
	Group("dev", layout="monadtall", matches=[Match(wm_class=["Emacs", "jetbrains-idea", "Sublime_text"])]),
	Group("sys", layout="monadtall", matches=[Match(wm_class=["Lxappearance", "Nitrogen"])]),
	Group("doc", layout="monadtall", matches=[Match(wm_class=["DesktopEditors", "marktext", "Zathura"])]),
	Group("chat", layout="max", matches=[Match(wm_class=["TelegramDesktop"])]),
	Group("game", layout="floating"),
	Group("media", layout="max", matches=[Match(wm_class=["Geeqie", "vlc"])]),
	Group("gfx", layout="floating")
]

for k, group in zip(["1", "2", "3", "4", "5", "6", "7", "8"], groups):
	keys.append(Key("M-"+(k), lazy.group[group.name].toscreen()))			# Send current window to another group
	keys.append(Key("M-S-"+(k), lazy.window.togroup(group.name)))	# Send current window to another group
#+END_SRC

* LAYOUTS
The layouts are how the windows are going to be positioned on the screen, on ~layout_theme~ you can set your own defaults.
Also, on the ~layouts~ section you can uncomment the layouts you want to use and comment the ones you dont want to, as a bonus, I have noticed that the order they are written is the same order they will cycle when you are changing them on the go (by pressing the keybinding).

#+BEGIN_SRC python
layout_theme = {"border_focus": "#61AFEF",
				"border_normal": "#848484",
				"margin": 4,
				"border_width": 2
}

layouts = [
	#layout.Bsp(**layout_theme),
	#layout.Columns(**layout_theme),
	#layout.Matrix(**layout_theme),
	#layout.MonadWide(**layout_theme),
	#layout.RatioTile(**layout_theme),
	#layout.Slice(**layout_theme),
	#layout.Stack(num_stacks=2),
	#layout.Stack(stacks=2, **layout_theme),
	#layout.Tile(shift_windows=True, **layout_theme),
	#layout.VerticalTile(**layout_theme),
	#layout.Zoomy(**layout_theme),
	layout.Floating(**layout_theme),
	layout.Max(**layout_theme),
	layout.MonadTall(**layout_theme)
]
#+END_SRC

* COLOURS
A set of 9 colours to use in our panel, if you have your own set of colours, this is where you should put them.

#+BEGIN_SRC python
colours = [["#141414", "#141414"], # Background
		   ["#FFFFFF", "#FFFFFF"], # Foreground
		   ["#ABB2BF", "#ABB2BF"], # Grey Colour
		   ["#E35374", "#E35374"],
		   ["#89CA78", "#89CA78"],
		   ["#F0C674", "#F0C674"],
		   ["#61AFEF", "#61AFEF"],
		   ["#D55FDE", "#D55FDE"],
		   ["#2BBAC5", "#2BBAC5"]]
#+END_SRC

* PROMPT
These are the settings for the Qtile prompt, I prefer to use rofi instead.

#+BEGIN_SRC python
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#+END_SRC

* WIDGETS
This section configures what you'll see on the bar, the ~widget_defaults~ section has set to... well... the defaults for all the widgets that you will set. Next to it you'll find an array called ~widgets~, those are the widgets that are going to appear on the bar (or panel if you like to call it like that). The widget list that I have defined is mostly oriented to a laptop user. Feel free to add, remove or modify all the widgets that you want, make this config suitable to your needs and liking :). One thing really important, these widgets are going to appear on every screen connected to your computer, if you want a secondary list based on the one showed here, change it's name to something different (eg. ~secondary_widgets~) to avoid conflicts and remove or edit the wigets you want.

#+BEGIN_SRC python
widget_defaults = dict(
	background = colours[0],
	foreground = colours[1],
	font = "SF Pro Text Regular",
	fontsize = 12,
	padding = 1
)
extension_defaults = widget_defaults.copy()

widgets = [
	widget.Sep(
		foreground = colours[0],
		linewidth = 4,
	),
	widget.Image(
		filename = "~/.config/qtile/py.png",
		mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn("rofi -show drun")},
		scale = True,
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	widget.GroupBox(
		active = colours[4],
		inactive = colours[6],
		other_current_screen_border = colours[5],
		other_screen_border = colours[2],
		this_current_screen_border = colours[7],
		this_screen_border = colours[2],
		urgent_border = colours[3],
		urgent_text = colours[3],
		disable_drag = True,
		highlight_method = 'text',
		invert_mouse_wheel = True,
		margin = 2,
		padding = 0,
		rounded = True,
		urgent_alert_method = 'text',
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	widget.CurrentLayout(
		foreground = colours[7],
		font = "SF Pro Text Semibold",
	),
	widget.Systray(
		icon_size = 14,
		padding = 4,
	),
	widget.Cmus(
		noplay_color = colours[2],
		play_color = colours[1],
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	widget.WindowName(
		max_chars = 75,
	),
	widget.TextBox(
		foreground = colours[3],
		font = "JetBrainsMono Nerd Font Regular",
		fontsize = 14,
		mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
		padding = 0,
		text = 'Ô°ö '
	),
	widget.CPU(
		foreground = colours[3],
		format = '{load_percent}%',
		mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
		update_interval = 1.0,
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	widget.TextBox(
		foreground = colours[4],
		font = "JetBrainsMono Nerd Font Regular",
		fontsize = 14,
		mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
		padding = 0,
		text = 'Ô¨ô ',
	),
	widget.Memory(
		foreground = colours[4],
		format = '{MemUsed} MB',
		mouse_callbacks = {"Button1": lambda: qtile.cmd_spawn(myTerm + ' -e ytop')},
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	#widget.TextBox(
	#	foreground = colours[5],
	#	font = "JetBrainsMono Nerd Font Regular",
	#	fontsize = 12,
	#	padding = 0,
	#	text = 'Ôóü ',
	#),
	#widget.Backlight(
	#	foreground = colours[5],
	#	foreground_alert = colours[3],
	#	backlight_name = 'amdgpu_bl0', # ls /sys/class/backlight/
	#	change_command = 'brightnessctl set {0}',
	#	step = 5,
	#),
	widget.TextBox(
		foreground = colours[5],
		font = "JetBrainsMono Nerd Font Regular",
		fontsize = 14,
		padding = 0,
		text = 'Ô£ï ',
	),
	widget.CheckUpdates(
		colour_have_updates = colours[5],
		colour_no_updates = colours[5],
		custom_command = 'checkupdates',
	#	custom_command = 'dnf updateinfo -q --list',
		display_format = '{updates} Updates',
	#	execute = "pkexec /usr/bin/dnf up -y",
		execute = "pkexec /usr/bin/pacman -Syu --noconfirm",
		no_update_string = 'Up to date!',
		update_interval = 900,
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	widget.TextBox(
		foreground = colours[6],
		font = "JetBrainsMono Nerd Font Regular",
		fontsize = 14,
		mouse_callbacks = ({
			"Button1": lambda: qtile.cmd_spawn("amixer -M set Master toggle"),
			"Button3": lambda: qtile.cmd_spawn("pavucontrol"),
			"Button4": lambda: qtile.cmd_spawn("amixer -M set Master 5%+ unmute"),
			"Button5": lambda: qtile.cmd_spawn("amixer -M set Master 5%- unmute"),
		}),
		padding = 0,
		text = 'Ô©Ω ',
	),
	widget.Volume(
		foreground = colours[6],
		mouse_callbacks = {"Button3": lambda: qtile.cmd_spawn("pavucontrol")},
		step = 5,
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	#widget.TextBox(
	#	foreground = colours[7],
	#	font = "JetBrainsMono Nerd Font Regular",
	#	fontsize = 14,
	#	padding = 0,
	#	text = 'Ô™û ',
	#),
	#widget.Net(
	#	foreground = colours[7],
	#	format = '{down} ÔÇ´ ',
	#	interface = 'enp1s0',
	#),
	widget.Battery(
		foreground = colours[7],
		low_foreground = colours[3],
		charge_char = 'Ôñà ',
		discharge_char = 'Ôïæ ',
		empty_char = 'Ôñç ',
		full_char = 'ÔñÑ ',
		unknown_char = 'Ôñê ',
		font = "JetBrainsMono Nerd Font Regular",
		fontsize = 14,
		format = '{char}',
		low_percentage = 0.2,
		padding = 0,
		show_short_text = False,
	),
	widget.Battery(
		foreground = colours[7],
		low_foreground = colours[3],
		format = '{percent:2.0%}',
		low_percentage = 0.2,
		notify_below = 20,
	),
	widget.Sep(
		foreground = colours[2],
		linewidth = 1,
		padding = 10,
	),
	widget.TextBox(
		foreground = colours[8],
		font = "JetBrainsMono Nerd Font Regular",
		fontsize = 14,
		padding = 0,
		text = 'ÔóØ ',
	),
	widget.Clock(
		foreground = colours[8],
		format = '%a %b %d  %I:%M %P    ',
	),
	#widget.StockTicker(
	#	apikey = 'AESKWL5CJVHHJKR5',
	#	url = 'https://www.alphavantage.co/query?'
	#),
]
#+END_SRC

* BAR & SCREENS
Despite not having too much lines of code, this section is severely important. In the first code line you'll find ~status_bar~, this creates the bar (or panel) based on the widget list on the previous section of this config, the number 18 that you see inside the parenthesis is the height of the bar in pixels and the opacity value is the transparency that the bar will have. The opacity is a number between 0 and 1, being 0 completely transparent (invisible) and 1 without transparency at all. For example if you want a bar with 90% transparency, change the value to 0.90. Now to the ~screens~ section, in this line you probably just want to change the word ~top~ (it'll put the bar on the top of the screen), change it to "bottom" and see what happens (remember to restart Qtile when you do changes to the config file!).

The code that follows ~screens~ detect if other monitors are connected to your computer, and if that's the case, the next block of code (the one that starts with the ~if~ statement) will start the rest of the screens automatically (quite cool ehh!). Remember I told you that if you wanted to create a secondary list of widgets you could do that without problem? here's were you'll use it, in the line ~screens.append(Screen(top=status_bar(widgets)))~ change the ~widgets~ word to the name of your secondary list of widgets, if you named it ~secondary_widgets~ then this line will be ~screens.append(Screen(top=status_bar(secondary_widgets)))~, now your main screen will have all the widgets that you set on the ~widgets~ array and the secondary widgets (if you created them) will appear on the secondary screens connected to your computer (eg. A TV when you want to watch Netflix).

#+BEGIN_SRC python
status_bar = lambda widgets: bar.Bar(widgets, 18, opacity=1.0)

screens = [Screen(top=status_bar(widgets))]

connected_monitors = subprocess.run(
	"xrandr | grep 'connected' | cut -d ' ' -f 2",
	shell = True,
	stdout = subprocess.PIPE
).stdout.decode("UTF-8").split("\n")[:-1].count("connected")

if connected_monitors > 1:
	for i in range(1, connected_monitors):
		screens.append(Screen(top=status_bar(widgets)))
#+END_SRC

* DRAG FLOATING WINDOWS
Very descriptive title, if you want to change your current window to floating, press the mod key you've set and then the left click on the mouse. If you want to resize a window press the mod key followed by the right click on the mouse and drag the mouse to the direction you want to resize the window, hope that make sense, if not, sorry for my bad English. And lastly, if one of your floating windows is sitting on top of another one, place the cursor on the window that is below, press the mod key and the key of the scrolling wheel on your mouse in order to bring that window on top.

After those mouse-key-bindings you will see something called ~floating_layout~, those are certain rules for windows that will always be floating. For example, when you click on a download button on your web browser you want that download dialog (the one that ask where to save the file) to be floating, or when you are moving files you want that little pop-up window that shows you the progress of the operation to be little and not be all weird and take all your screen. To add more rules run ~xprop WM_CLASS~ and click on the window you are interested on knowing its properties.

#+BEGIN_SRC python
mouse = [
	Drag("M-1", lazy.window.set_position_floating(),
		start = lazy.window.get_position()),
	Drag("M-3", lazy.window.set_size_floating(),
		start  = lazy.window.get_size()),
	Click("M-2", lazy.window.bring_to_front())
]

auto_fullscreen = True
auto_minimize = True
bring_front_click = False
cursor_warp = False
dgroups_app_rules = []  # type: List
dgroups_key_binder = None
floating_layout = layout.Floating(**layout_theme,
	float_rules=[
		*layout.Floating.default_float_rules,
		Match(title='Authentication'),
		Match(title='branchdialog'),
		Match(title='pinentry'),
		Match(wm_class='confirmreset'),
		Match(wm_class='makebranch'),
		Match(wm_class='maketag'),
		Match(wm_class='ssh-askpass'),
])
focus_on_window_activation = "smart"
follow_mouse_focus = True
reconfigure_screens = True
#+END_SRC

* STARTUP APPLICATIONS
These little hook runs the autostart.sh file (located on the qtile config folder) only when you log in to Qtile. Inside the autostart file there are a few programs that I want to always launch, like my wallpaper setter, the compositor, the notifications daemon, etc. Change the autostart.sh file to your needs, if you see that you log into Qtile and the things you have set are not starting, run ~chmod +x "$XDG_CONFIG_HOME"/qtile/autostart.sh~.

#+BEGIN_SRC python
@hook.subscribe.startup_once
def autostart():
	home = os.path.expanduser('~/.config/qtile/autostart.sh')
	subprocess.call([home])
#+END_SRC

* WMNAME
Some really random stuff.

#+BEGIN_SRC python
# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+END_SRC
