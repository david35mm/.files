#+TITLE: Qtile Config
#+PROPERTY: header-args :tangle config.py

* TABLE OF CONTENTS :toc:
- [[#about][About]]
- [[#imports][IMPORTS]]
- [[#variables][VARIABLES]]
- [[#keybindings][KEYBINDINGS]]
  - [[#qtile-controls][Qtile Controls]]
  - [[#system-controls][System Controls]]
  - [[#applications-launcher][Applications launcher]]
- [[#groups][GROUPS]]
- [[#layouts][LAYOUTS]]
- [[#colours][COLOURS]]
- [[#prompt][PROMPT]]
- [[#widgets][WIDGETS]]
- [[#bar--screens][BAR & SCREENS]]
- [[#drag-floating-windows][DRAG FLOATING WINDOWS]]
- [[#startup-applications][STARTUP APPLICATIONS]]
- [[#wmname][WMNAME]]

* About
#+CAPTION: Qtile Screenshot
#+ATTR_HTML: :alt Qtile Screenshot :title A Brief Look :align left
[[https://github.com/david35mm/.files/blob/main/.screenshots/qtile.png]]

This config file was modified by David Salom√≥n on March 2, 2021 at 05:44 pm.
- My YouTube Channel: https://9m.no/ëÖÅÌÖö
- My Instagram Page: https://www.instagram.com/david.35mm
- My GitHub: https://github.com/david35mm
- My Photography Portfolio: https://adobe.ly/32jk5W6

It's important to keep in mind that this config is based on [[https://gitlab.com/dwt1/dotfiles/-/tree/master/.config/qtile][Derek Taylor's]] one and also some of the ideas were taken from various post on [[https://www.reddit.com/r/unixporn/][r/unixporn]].
- The YouTube Channel of Derek Taylor (DistroTube): http://www.youtube.com/c/DistroTube
- Derek Taylor GitLab: https://gitlab.com/dwt1
- r/unixporn on Reddit: https://reddit.com/r/unixporn

* IMPORTS
These are some libraries that Qtile needs to make the widgets, layouts and all of the rest to work.

#+BEGIN_SRC python
import os
import re
import socket
import subprocess
from libqtile import bar, hook, layout, widget
from libqtile.config import Click, Drag, EzKey, Group, Key, Match, Screen
from libqtile.lazy import lazy
from typing import List
#+END_SRC

* VARIABLES
Here I have set some variables so that you can set your default programs. If some of you guys want to install the Brave Web Browser, do it with my referral link please. https://brave.com/gek146
#+BEGIN_SRC python
mod = "mod4"
myTerm = "alacritty"
myBrowser = "brave-browser"
myFileManager = "nemo"
myTextEditor = "subl"
myOfficeSuite = "desktopeditors"
myLaTeXEditor = "gnome-latex"
myMusicPlayer = "alacritty -e cmus"
myConfig = "~/.config/qtile/config.py"
#+END_SRC

#+RESULTS:
: None

* KEYBINDINGS
Here's a detailed table with my keybindings.
Important: I like to use the Windows key as the Super key (which in the config file is known as "mod4").
If for some weird reason you are one of those persons who likes to use the Alt key instead of the Super key, change the mod variable in the config file to "mod1".

** Qtile Controls
| Keybinding           | Action                                                     |
|----------------------+------------------------------------------------------------|
| MODKEY + CONTROL + r | Restarts Qtile                                             |
| MODKEY + CONTROL + q | Close Qtile                                                |
| MODKEY + j           | Switch focus between windows (up)                          |
| MODKEY + k           | Switch focus between windows (down)                        |
| MODKEY + w           | Closes the window with focus                               |
| MODKEY + l           | Expand size of window (Only available in MonadTall layout) |
| MODKEY + h           | Shrink size of window (Only available in MonadTall layout) |
| MODKEY + CONTROL + k | Changes window position in the current layout (up)         |
| MODKEY + CONTROL + j | Changes window position in the current layout (down)       |
| MODKEY + f           | Put the focused window to/from floating mode               |
| MODKEY + s           | Put the focused window to/from fullscreen mode             |
| MODKEY + SPACE       | Switch focus between windows (clockwise)                   |
| MODKEY + TAB         | Rotates through the available layouts                      |
| MODKEY + 1-9         | Switch focus to workspace (1-9)                            |
| MODKEY + SHIFT + 1-9 | send focused window to workspace (1-9)                     |

** System Controls
| Keybinding            | Action                                |
|-----------------------+---------------------------------------|
| XF86AudioLowerVolume  | Decrease the volume                   |
| XF86AudioRaiseVolume  | Increase the volume                   |
| XF86AudioMute         | Turn the volume off                   |
| XF86MonBrightnessUp   | Increase the brightness of the screen |
| XF86MonBrightnessDown | Decrease the brightness of the screen |

*Advice*: If for some reason your keyboard doesn't have the brightness control keys, don't worry, I got you. I've set two alternative keybindings to control the brightness through your keyboard, you just have to uncomment those lines.

| Keybinding | Action                                |
|------------+---------------------------------------|
| ALT + k    | Increase the brightness of the screen |
| ALT + j    | Decrease the brightness of the screen |

** Applications launcher
| Keybinding                       | Action                                                                                   |
| MODKEY + RETURN (RETURN = ENTER) | Opens the Terminal Emulator ([[https://github.com/alacritty/alacritty#installation][Alacritty]])                                                  |
| MODKEY + ALT + s                 | Opens [[https://www.spotify.com/co/download/linux][Spotify]]                                                                            |
| MODKEY + ALT + v                 | Opens [[https://www.videolan.org/vlc/#download][VLC]]                                                                                |
| MODKEY + ALT + g                 | Opens [[https://store.steampowered.com/about][Steam]]                                                                              |
| MODKEY + ALT + t                 | Opens the Text Editor ([[https://www.sublimetext.com/docs/3/linux_repositories.html][Sublime Text]])                                                     |
| MODKEY + ALT + o                 | Opens the Office Suite ([[https://www.onlyoffice.com/download-desktop.aspx][OnlyOffice]])                                                      |
| MODKEY + ALT + l                 | Opens the LaTeX Editor ([[https://wiki.gnome.org/Apps/GNOME-LaTeX#Installation][Gnome-LaTeX]])                                                     |
| MODKEY + e                       | Opens the File Manager ([[https://github.com/linuxmint/nemo][nemo]])                                                            |
| MODKEY + ALT + i                 | Opens the Web Browser ([[https://brave.com/gek146][Brave Browser]])                                                    |
| MODKEY + ALT + m                 | Opens the Music Player ([[https://cmus.github.io/][cmus]])                                                            |
| MODKEY + r                       | Opens the Desktop File Application Launcher ([[https://github.com/davatorium/rofi/blob/next/INSTALL.md#install-distribution][rofi]])                                       |
| MODKEY + ALT + r                 | Opens the Application Launcher (rofi again)                                              |
| ALT + Tab                        | Opens the Window Switcher, like the one on Windows but better (it's rofi one more time.) |

#+BEGIN_SRC python
keys = [
	# Qtile Controls
	EzKey("M-C-r", lazy.restart()),
	EzKey("M-C-q", lazy.shutdown()),

	# Window and Layout Controls
	EzKey("M-k", lazy.layout.down()),
	EzKey("M-j", lazy.layout.up()),
	EzKey("M-C-k", lazy.layout.shuffle_down()),
	EzKey("M-C-j", lazy.layout.shuffle_up()),
	EzKey("M-<space>", lazy.layout.next()),
	EzKey("M-<Tab>", lazy.next_layout()),
	EzKey("M-l", lazy.layout.grow()),
	EzKey("M-h",lazy.layout.shrink()),
	EzKey("M-f", lazy.window.toggle_floating()),
	EzKey("M-s", lazy.window.toggle_fullscreen()),
	EzKey("M-w", lazy.window.kill()),
	EzKey("M-<period>", lazy.next_screen()),
	EzKey("M-<comma>", lazy.prev_screen()),

	# System Controls
	EzKey("<XF86AudioLowerVolume>", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ -5%")),
	EzKey("<XF86AudioRaiseVolume>", lazy.spawn("pactl set-sink-volume @DEFAULT_SINK@ +5%")),
	EzKey("<XF86AudioMute>", lazy.spawn("pactl set-sink-mute @DEFAULT_SINK@ toggle")),
	EzKey("<XF86MonBrightnessUp>", lazy.spawn("brightnessctl set +10%")),
	EzKey("<XF86MonBrightnessDown>", lazy.spawn("brightnessctl set 10%-")),
	#EzKey("A-k", lazy.spawn("brightnessctl set +10%")),
	#EzKey("A-j", lazy.spawn("brightnessctl set 10%-")),

	# Applications launcher
	EzKey("A-<Tab>", lazy.spawn("rofi -show window")),
	EzKey("M-A-r", lazy.spawn("rofi -show run")),
	EzKey("M-r", lazy.spawn("rofi -show drun")),
	EzKey("M-<Return>", lazy.spawn(myTerm)),
	EzKey("M-A-s", lazy.spawn("spotify")),
	EzKey("M-A-v", lazy.spawn("vlc")),
	EzKey("M-A-g", lazy.spawn("steam")),
	EzKey("M-A-t", lazy.spawn(myTextEditor)),
	EzKey("M-A-o", lazy.spawn(myOfficeSuite)),
	EzKey("M-A-l", lazy.spawn(myLaTeXEditor)),
	EzKey("M-e", lazy.spawn(myFileManager)),
	EzKey("M-A-i", lazy.spawn(myBrowser)),
	EzKey("M-A-m", lazy.spawn(myMusicPlayer)),
]
#+END_SRC

* GROUPS
For some reason Qtile decided to call them groups, but basically they are workspaces.
Feel free to change the names and default layouts on the "groups" section.

#+BEGIN_SRC python
groups = [
	Group("web", layout="max"),
	Group("dev", layout="monadtall"),
	Group("sys", layout="bsp"),
	Group("doc", layout="bsp"),
	Group("chat", layout="monadtall"),
	Group("game", layout="max"),
	Group("media", layout="max"),
	Group("gfx", layout="floating")
]

for k, group in zip(["1", "2", "3", "4", "5", "6", "7", "8"], groups):
	keys.append(Key([mod], k, lazy.group[group.name].toscreen()))			# Send current window to another group
	keys.append(Key([mod, "shift"], k, lazy.window.togroup(group.name)))	# Send current window to another group
#+END_SRC

* LAYOUTS
The layouts are how the windows are going to be positioned on the screen, on "layout_theme" you can set your own defaults.
Also, on the "layouts" section you can uncomment the layouts you want to use and comment the ones you dont want to.

#+BEGIN_SRC python
layout_theme = {"border_focus": "61AFEF", #colours[6]
				"border_normal": "848484", #colours[2]
				"margin": 4,
				"border_width": 2
				}

layouts = [
	#layout.Columns(**layout_theme),
	#layout.Matrix(**layout_theme),
	#layout.MonadWide(**layout_theme),
	#layout.RatioTile(**layout_theme),
	#layout.Slice(**layout_theme),
	#layout.Stack(num_stacks=2),
	#layout.Stack(stacks=2, **layout_theme),
	#layout.Tile(shift_windows=True, **layout_theme),
	#layout.VerticalTile(**layout_theme),
	#layout.Zoomy(**layout_theme),
	layout.Bsp(**layout_theme),
	layout.Floating(**layout_theme),
	layout.Max(**layout_theme),
	layout.MonadTall(**layout_theme)
]
#+END_SRC

* COLOURS
A set of 9 colours to use in our panel, if you have your own set of colours, this is where you should put them.

#+BEGIN_SRC python
colours = [["#141414", "#141414"], # Background
		   ["#FFFFFF", "#FFFFFF"], # Foreground
		   ["#848484", "#848484"], # Grey Colour
		   ["#E35374", "#E35374"],
		   ["#98C379", "#98C379"],
		   ["#F0C674", "#F0C674"],
		   ["#61AFEF", "#61AFEF"],
		   ["#C678DD", "#C678DD"],
		   ["#56B6BC", "#56B6BC"]]
#+END_SRC

* PROMPT
These are the settings for the Qtile prompt, I prefer to use rofi instead.

#+BEGIN_SRC python
prompt = "{0}@{1}: ".format(os.environ["USER"], socket.gethostname())
#+END_SRC

* WIDGETS
This section configures what you'll see on the bar, the "widget_defaults" section has set to... well... the defaults for all the widgets that you will set. Next to it you'll find an array called "widgets", those are the widgets that are going to appear on the bar (or panel if you like to call it like that). The widget list that I have defined is mostly oriented to a laptop user. Feel free to add, remove or modify all the widgets that you want, make this config suitable to your needs and liking :). One thing really important, these widgets are going to appear on every screen connected to your computer, if you want a secondary list based on the one showed here, change it's name to something different (eg. secondary_widgets) to avoid conflicts and remove or edit the wigets you want.

#+BEGIN_SRC python
widget_defaults = dict(
	background= colours[0],
	foreground=colours[1],
	font="SF Pro Text Regular",
	fontsize=12,
	padding=1
	)
extension_defaults = widget_defaults.copy()

widgets = [
	widget.Sep(
		foreground=colours[0],
		linewidth=4
	),
	widget.Image(
		scale=True,
		mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn("rofi -show drun")},
		filename="~/.config/qtile/py.png"
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	widget.GroupBox(
		padding=0,
		active=colours[4],
		inactive=colours[6],
		margin=2,
		highlight_method='text',
		this_current_screen_border=colours[7],
		urgent_alert_method='text',
		urgent_border=colours[3],
		urgent_text=colours[3],
		disable_drag=True,
		invert_mouse_wheel=True
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	widget.CurrentLayout(
		font="SF Pro Text Semibold",
		foreground=colours[7]
	),
	widget.Systray(
		icon_size=14,
		padding=4
	),
	widget.Cmus(
		play_color=colours[1],
		noplay_color=colours[2]
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	widget.WindowName(
	),
	widget.TextBox(
		font="JetBrainsMono Nerd Font Regular",
		foreground=colours[3],
		fontsize=14,
		padding=0,
		text='Ô°ö '
	),
	widget.CPU(
		foreground=colours[3],
		mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn(myTerm + ' -e ytop')},
		format='{load_percent}%',
		update_interval=1.0
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	widget.TextBox(
		font="JetBrainsMono Nerd Font Regular",
		foreground=colours[4],
		fontsize=14,
		padding=0,
		text='Ô¨ô '
	),
	widget.Memory(
		foreground=colours[4],
		mouse_callbacks = {'Button1': lambda qtile: qtile.cmd_spawn(myTerm + ' -e ytop')},
		format='{MemUsed} MB'
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	#widget.TextBox(
	#	font="JetBrainsMono Nerd Font Regular",
	#	foreground=colours[5],
	#	fontsize=12,
	#	padding=0,
	#	text='Ôóü '
	#),
	#widget.Backlight(
	#	foreground=colours[5],
	#	foreground_alert=colours[3],
	#	backlight_name='amdgpu_bl0', # ls /sys/class/backlight/
	#	change_command='brightnessctl set {0}',
	#	step=5
	#),
	widget.TextBox(
		font="JetBrainsMono Nerd Font Regular",
		foreground=colours[5],
		fontsize=14,
		padding=0,
		text='Ô£ï '
	),
	widget.CheckUpdates(
		colour_have_updates=colours[5],
		colour_no_updates=colours[5],
		distro='Fedora',
		custom_command='dnf updateinfo -q --list',
		display_format='{updates} Updates',
		no_update_string='Up to date!',
		update_interval=900
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	widget.TextBox(
		font="JetBrainsMono Nerd Font Regular",
		foreground=colours[6],
		fontsize=14,
		padding=0,
		text='Ô©Ω '
	),
	widget.Volume(
		foreground=colours[6],
		step=5
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	#widget.TextBox(
	#	font="JetBrainsMono Nerd Font Regular",
	#	foreground=colours[7],
	#	fontsize=14,
	#	padding=0,
	#	text='Ô™û '
	#),
	#widget.Net(
	#	foreground=colours[7],
	#	interface='enp1s0',
	#	format='{down} ÔÇ´'
	#	),
	widget.Battery(
		font="JetBrainsMono Nerd Font Regular",
		fontsize=14,
		padding=0,
		foreground=colours[7],
		charge_char='Ôñà ',
		discharge_char='Ôïæ ',
		empty_char='Ôñç ',
		full_char='ÔñÑ ',
		unknown_char='Ôñê ',
		format='{char}',
		low_foreground=colours[3],
		low_percentage=0.2,
		show_short_text=False
	),
	widget.Battery(
		foreground=colours[7],
		format='{percent:2.0%}',
		low_foreground=colours[3],
		low_percentage=0.2,
		notify_below=20,
	),
	widget.Sep(
		foreground=colours[2],
		linewidth=1,
		padding=10
	),
	widget.TextBox(
		font="JetBrainsMono Nerd Font Regular",
		foreground=colours[8],
		fontsize=14,
		padding=0,
		text='ÔóØ '
	),
	widget.Clock(
		foreground=colours[8],
		format='%a %b %d  %I:%M %P    '
	),
	#widget.StockTicker(
	#	apikey='AESKWL5CJVHHJKR5',
	#	url='https://www.alphavantage.co/query?'
	#	),
]
#+END_SRC

* BAR & SCREENS
Despite not having too much lines of code, this section is severely important. In the first code line you'll find "status_bar", this creates the bar (or panel) based on the widget list on the previous section of this config, the number 18 that you see inside the parenthesis is the height of the bar in pixels and the opacity value is the transparency that the bar will have. The opacity is a number between 0 and 1, being 0 completely transparent (invisible) and 1 without transparency at all. For example if you want a bar with 90% transparency, change the value to 0.90. Now to the "screens" section, in this line you probably just want to change the word "top" (it'll put the bar on the top of the screen), change it for "bottom" and see what happens (remember to restart Qtile when you do changes to the config file!).

The code that follows "screens" detect if other monitors are connected to your computer, and if that's the case, the next block of code (the one that starts with the "if" statement) will start the rest of the screens automatically (quite cool ehh!). Remember that I told you that if you wanted to create a secondary list of widgets you could do that without problem? here's were you'll use it, in the line "screens.append(Screen(top=status_bar(widgets)))" change the "widgets" word to the name of your secondary list of widgets, if you named it "secondary_widgets" then this line will be "screens.append(Screen(top=status_bar(secondary_widgets)))", now your main screen will have all the widgets that you set on the "widgets" array and the secondary widgets (if you created them) will appear on the secondary screens connected to your computer (eg. A TV when you want to watch Netflix).

#+BEGIN_SRC python
status_bar = lambda widgets: bar.Bar(widgets, 18, opacity=1.0)

screens = [Screen(top=status_bar(widgets))]

connected_monitors = subprocess.run(
	"xrandr | grep 'connected' | cut -d ' ' -f 2",
	shell=True,
	stdout=subprocess.PIPE
).stdout.decode("UTF-8").split("\n")[:-1].count("connected")

if connected_monitors > 1:
	for i in range(1, connected_monitors):
		screens.append(Screen(top=status_bar(widgets)))
#+END_SRC

* DRAG FLOATING WINDOWS
Very descriptive title, if you want to change your current window to floating, press the mod key you've set and then the left click on the mouse. If you want to resize a window press the mod key followed by the right click on the mouse and drag the mouse to the direction you want to resize the window, hope that make sense, if not, sorry for my bad English. And lastly, if one of your floating windows is sitting on top of another one, place the cursor on the window that is below, press the mod key and the key of the scrolling wheel on your mouse in order to bring that window on top.

#+BEGIN_SRC python
mouse = [
	Drag([mod], "Button1", lazy.window.set_position_floating(),
		start=lazy.window.get_position()),
	Drag([mod], "Button3", lazy.window.set_size_floating(),
		start=lazy.window.get_size()),
	Click([mod], "Button2", lazy.window.bring_to_front())
]

auto_fullscreen = True
bring_front_click = False
cursor_warp = False
dgroups_app_rules = []  # type: List
dgroups_key_binder = None
floating_layout = layout.Floating(float_rules=[
		*layout.Floating.default_float_rules,
		Match(title='Authentication'),
		Match(title='branchdialog'),
		Match(title='pinentry'),
		Match(wm_class='confirmreset'),
		Match(wm_class='makebranch'),
		Match(wm_class='maketag'),
		Match(wm_class='ssh-askpass'),
])
focus_on_window_activation = "smart"
follow_mouse_focus = True
#+END_SRC

* STARTUP APPLICATIONS
These little hook runs the autostart.sh file (located on the qtile config folder) only when you log in to Qtile. Inside the autostart file there are two instructions to run nitrogen (to draw a wallpaper) and picom (the compositor). Change the autostart.sh file to your needs and don't forget to make it executable by typing "chmod +x ~/.config/qtile/autostart.sh" on your terminal.

#+BEGIN_SRC python
@hook.subscribe.startup_once
def autostart():
	home = os.path.expanduser('~/.config/qtile/autostart.sh')
	subprocess.call([home])
#+END_SRC

* WMNAME
Some really random stuff.

#+BEGIN_SRC python
# XXX: Gasp! We're lying here. In fact, nobody really uses or cares about this
# string besides java UI toolkits; you can see several discussions on the
# mailing lists, GitHub issues, and other WM documentation that suggest setting
# this string if your java app doesn't work correctly. We may as well just lie
# and say that we're a working one by default.
#
# We choose LG3D to maximize irony: it is a 3D non-reparenting WM written in
# java that happens to be on java's whitelist.
wmname = "LG3D"
#+END_SRC
