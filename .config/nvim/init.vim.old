"   __  __          ___ ____     __   _ __    _____     __
"  / / / /__ ___   |_  / / /____/ /  (_) /_  / ___/__  / /__  __ ______
" / /_/ (_-</ -_) / __/_  _/___/ _ \/ / __/ / /__/ _ \/ / _ \/ // / __/
" \____/___/\__/ /____//_/    /_.__/_/\__/  \___/\___/_/\___/\_,_/_/

if (empty($TMUX))
    if (has("nvim"))
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif
    if (has("termguicolors"))
        set termguicolors
    endif
endif

if &shell =~# 'fish$'
    set shell=sh
endif

"    ___  __          _
"   / _ \/ /_ _____ _(_)__  ___
"  / ___/ / // / _ `/ / _ \(_-<
" /_/  /_/\_,_/\_, /_/_//_/___/
"             /___/

lua <<EOF
local fn = vim.fn
local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
if fn.empty(fn.glob(install_path)) > 0 then
    packer_bootstrap = fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
end

return require('packer').startup(function(use)
    use 'hoob3rt/lualine.nvim'
    --use {
    --    'echasnovski/mini.nvim',
    --    branch = 'stable'
    --}
    use 'jiangmiao/auto-pairs'
    use 'navarasu/onedark.nvim'
    use 'norcalli/nvim-colorizer.lua'
    use {
        'nvim-treesitter/nvim-treesitter',
        run = ':TSUpdate'
    }
    use 'tpope/vim-surround'
    use 'ryanoasis/vim-devicons'

    -- Automatically set up your configuration after cloning packer.nvim
    -- Put this at the end after all plugins
    if packer_bootstrap then
        require('packer').sync()
    end
end)
EOF

"   _____                      __  ____    __  __  _
"  / ___/__ ___  ___ _______ _/ / / __/__ / /_/ /_(_)__  ___ ____
" / (_ / -_) _ \/ -_) __/ _ `/ / _\ \/ -_) __/ __/ / _ \/ _ `(_-<
" \___/\__/_//_/\__/_/  \_,_/_/ /___/\__/\__/\__/_/_//_/\_, /___/
"                                                      /___/

lua <<EOF
vim.opt.autoindent = true
vim.opt.autoread = true
vim.opt.backspace = {"indent", "eol", "start"}
vim.opt.backup = false
vim.opt.clipboard = {"unnamed", "unnamedplus"}
vim.opt.cmdheight = 1
vim.opt.colorcolumn = "80"
vim.opt.complete:remove{"i"}
vim.opt.copyindent = true
vim.opt.cursorline = true
vim.opt.display:append{"lastline"}
vim.opt.encoding = "utf-8"
vim.opt.errorbells = false
vim.opt.expandtab = true
vim.opt.fileencoding = "utf-8"
vim.opt.fileencodings = "utf-8"
vim.opt.fileformats = {"unix", "dos", "mac"}
vim.opt.formatoptions:append{"j"}
vim.opt.formatoptions:remove{"c", "r", "o"}
vim.opt.guicursor = {a = "blinkon0"}
vim.opt.guifont = "Iosevka david35mm 10"
vim.opt.guioptions = "egmrti"
vim.opt.hidden = true
vim.opt.history = 1000
vim.opt.hlsearch = true
vim.opt.ignorecase = true
vim.opt.incsearch = true
vim.opt.iskeyword = "-"
vim.opt.laststatus = 3
vim.opt.list = true
vim.opt.listchars = {eol = "",extends = "",nbsp = "+",precedes = "",tab = "│ ",trail = "-"}
vim.opt.modeline = true
vim.opt.modelines = 10
vim.opt.mouse = "a"
vim.opt.mousemodel = "popup"
vim.opt.nrformats:remove{"octal"}
vim.opt.number = true
vim.opt.path = "**"
vim.opt.preserveindent = true
vim.opt.relativenumber = true
vim.opt.ruler = true
vim.opt.scrolloff = 1
vim.opt.sessionoptions:remove{"options"}
vim.opt.shell = "/bin/sh"
vim.opt.shiftwidth = 4
vim.opt.shortmess:append{"c", "A"}
vim.opt.showcmd = false
vim.opt.showmode = false
vim.opt.sidescrolloff = 5
vim.opt.signcolumn = "yes"
vim.opt.smartcase = true
vim.opt.smarttab = true
vim.opt.softtabstop = 0
vim.opt.statusline = "%F%m%r%h%w%=(%{&ff}/%Y) (line %l/%L, col %c)"
vim.opt.swapfile = false
vim.opt.tabpagemax = 50
vim.opt.tabstop = 4
vim.opt.tags:prepend{"./tags;"}
vim.opt.tags:remove{"./tags", "./tags;"}
vim.opt.termguicolors = true
vim.opt.textwidth = 79
vim.opt.title = true
vim.opt.titleold = "Terminal"
vim.opt.titlestring = "%F"
vim.opt.ttimeout = true
vim.opt.ttimeoutlen = 100
vim.opt.updatetime = 100
vim.opt.viewoptions:remove{"options"}
vim.opt.visualbell = true
vim.opt.wildignore:append{"*.class","*.db","*.gem","*.o","*.obj","*.out","*.pyc","*.rar","*.rbc","*.rbo","*.so","*.sqlite","*.swp","*.tar.bz2","*.tar.gz","*.tar.xz","*.zip","*/.bundle/*","*/.sass-cache/*","*/tmp/*","*/vendor/cache/*","*/vendor/gems/*","*node_modules/","*~","._*",".git",".svn","__pycache__"}
vim.opt.wildmenu = true
vim.opt.wildmode = {list = "full"}
vim.opt.wrap = true
vim.opt.wrapmargin = 2
vim.opt.writebackup = false
EOF

"Fix sizing bug with Alacritty terminal
autocmd VimEnter * :silent exec "!kill -s SIGWINCH $PPID"
" Disables automatic commenting on newline:
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Automatically deletes all trailing whitespace and newlines at end of file on save.
autocmd BufWritePre * %s/\s\+$//e
autocmd BufWritePre * %s/\n\+\%$//e
autocmd BufWritePre *.[ch] %s/\%$/\r/e

" Auto reload if file was changed somewhere else (for autoread)
autocmd CursorHold * checktime

"    ___  __          _        _____          ____
"   / _ \/ /_ _____ _(_)__    / ___/__  ___  / _(_)__ ____
"  / ___/ / // / _ `/ / _ \  / /__/ _ \/ _ \/ _/ / _ `(_-<
" /_/  /_/\_,_/\_, /_/_//_/  \___/\___/_//_/_//_/\_, /___/
"             /___/                             /___/

" hoob3rt/lualine.nvim
lua <<EOF
require('lualine').setup {
    options = {
        component_separators = '',
        section_separators = '',
        theme = 'onedark'
    }
}
EOF

" lukas-reineke/indent-blankline.nvim
"let g:indent_blankline_use_treesitter=v:true
"let g:indent_blankline_char='│'

" navarasu/onedark.nvim
lua <<EOF
require('onedark').setup {
    style = 'darker'
}
require('onedark').load()
EOF

" norcalli/nvim-colorizer.lua
lua <<EOF
require'colorizer'.setup()
EOF

"nvim-treesitter/nvim-treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
    ensure_installed = { "bash", "c", "cpp", "css", "fish", "html", "lua", "python", "toml", "vim", "yaml" },
    highlight = { enable = true },
    indent = { enable = true }
}
EOF

" ryanoasis/vim-devicons
let WebDevIconsNerdTreeAfterGlyphPadding = " "
let WebDevIconsNerdTreeGitPluginForceVAlign = 0
let WebDevIconsUnicodeDecorateFolderNodes = 1
let DevIconsEnableFoldersOpenClose = 1
let WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol = ""
let DevIconsDefaultFolderOpenSymbol = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols = {}
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['css'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['go'] = "ﳑ"
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['html'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['class'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['clj'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['cljc'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['gradle'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['jar'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['java'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['cjs'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['js'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['mjs'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ts'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['jl'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['lua'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['md'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['xls'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['xlsx'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['ppt'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['pptx'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['doc'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['docx'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['pdf'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['pl'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['pm'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['pod'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['php'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['py'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rmd'] = "ﳒ"
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rb'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['rs'] = ""
let WebDevIconsUnicodeDecorateFileNodesExtensionSymbols['swift'] = ""

"    ___                        __ __
"   / _ \___ __ _  ___ ____    / //_/__ __ _____
"  / , _/ -_)  ' \/ _ `/ _ \  / ,< / -_) // (_-<
" /_/|_|\__/_/_/_/\_,_/ .__/ /_/|_|\__/\_, /___/
"                    /_/              /___/

lua <<EOF
vim.api.nvim_set_keymap("", "<C-s>", "<ESC>:w<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("", "<F6>", ":setlocal spell spelllang=en_gb,es_mx<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("i", "ii", "<Esc>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-a>", "gg v G $", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "Q", "gqap", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "S", ":%s///g<Left><Left><Left>", { noremap = true })
vim.api.nvim_set_keymap("n", "Y", "y$", { noremap = true, silent = true })
vim.api.nvim_set_keymap("v", "<F9>", ":sort<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("v", "Q", "gq", { noremap = true, silent = true })
vim.api.nvim_set_keymap("v", "S", ":s///g<Left><Left><Left>", { noremap = true })
EOF

"    ___       _ __   __  ____         __
"   / _ )__ __(_) /__/ / / __/_ _____ / /____ __ _
"  / _  / // / / / _  / _\ \/ // (_-</ __/ -_)  ' \
" /____/\_,_/_/_/\_,_/ /___/\_, /___/\__/\__/_/_/_/
"                          /___/

autocmd Filetype rmd,Rmd nmap <C-b> :!Rscript -e "rmarkdown::render('%', clean=TRUE)"<CR>

lua <<EOF
vim.opt.splitbelow = true
vim.opt.splitright = true

vim.g.mapleader = " "
vim.api.nvim_set_keymap("n", "<Leader>nw", ":set list nowrap<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>w", ":set list wrap<CR>", { noremap = true, silent = true })

vim.api.nvim_set_keymap("n", "<C-h>", "<C-w>h", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-j>", "<C-w>j", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-k>", "<C-w>k", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-l>", "<C-w>l", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>th", "<C-w>t<C-w>H", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<Leader>tk", "<C-w>t<C-w>K", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-Left>", ":vertical resize +4<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-Right>", ":vertical resize -4<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-Up>", ":resize +2<CR>", { noremap = true, silent = true })
vim.api.nvim_set_keymap("n", "<C-Down>", ":resize -2<CR>", { noremap = true, silent = true })
EOF
