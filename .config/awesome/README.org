#+TITLE: Awesomewm Config
#+PROPERTY: header-args :tangle rc.lua

* TABLE OF CONTENTS :toc:
- [[#about][ABOUT]]
- [[#imports][IMPORTS]]
- [[#error-handling][ERROR HANDLING]]
- [[#theme-startup][THEME STARTUP]]
- [[#variables][VARIABLES]]
- [[#layouts][LAYOUTS]]
- [[#right-click-menu][RIGHT-CLICK MENU]]
- [[#wibox][WIBOX]]
  - [[#configuration-for-base-widgets][CONFIGURATION FOR BASE WIDGETS]]
  - [[#tag-names][TAG NAMES]]
  - [[#layout-box-and-misc-widgets][LAYOUT BOX AND MISC WIDGETS]]
  - [[#create-the-bar][CREATE THE BAR]]
- [[#keybindings][KEYBINDINGS]]
  - [[#mouse-bindings][MOUSE BINDINGS]]
  - [[#awesomewm-controls][AWESOMEWM CONTROLS]]
  - [[#system-controls][SYSTEM CONTROLS]]
  - [[#applications-launcher][APPLICATIONS LAUNCHER]]
- [[#rules][RULES]]
- [[#signals][SIGNALS]]
- [[#autostart][AUTOSTART]]

* ABOUT
#+CAPTION: Awesomewm Screenshot
#+ATTR_HTML: :alt Awesomewm Screenshot :title A Brief Look :align left
[[https://github.com/david35mm/.files/blob/main/.config/awesome/awesome.png]]

This config file was modified by David Salom√≥n on Mar 08, 2022 at 09:43 pm (Bogota DC, Colombia UTC-5).
- My YouTube Channel: https://9m.no/ëÖÅÌÖö
- My Instagram Page: https://www.instagram.com/david35mm.co
- My GitHub: https://github.com/david35mm
- My Photography Portfolio: https://adobe.ly/32jk5W6

* IMPORTS
These are some libraries that awesomewm needs to make the widgets, layouts and all of the rest to work.

#+BEGIN_SRC lua
pcall(require, "luarocks.loader")

-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local hotkeys_popup = require("awful.hotkeys_popup")
-- Enable hotkeys help widget for VIM and other apps when
-- client with a matching name is opened:
require("awful.hotkeys_popup.keys")
#+END_SRC

* ERROR HANDLING
Awesomewm will automatically fallback to the default configuration if errors are found on this config.

#+BEGIN_SRC lua
if awesome.startup_errors then
    naughty.notify({
        preset = naughty.config.presets.critical,
        title = "Oops, there were errors during startup!",
        text = awesome.startup_errors,
    })
end

do
    local in_error = false
    awesome.connect_signal(
        "debug::error", function(err)
            -- Make sure we don't go into an endless error loop
            if in_error then return end
            in_error = true

            naughty.notify({
                preset = naughty.config.presets.critical,
                title = "Oops, an error happened!",
                text = tostring(err),
            })
            in_error = false
        end)
end
#+END_SRC

* THEME STARTUP
Awesomewm pulls your theme preferences from another file called ~theme.lua~, there you can set your fonts, colours, size of the notification window and else everything related to the visual personalization of the window manager.

#+BEGIN_SRC lua
beautiful.init(gears.filesystem.get_configuration_dir() .. "theme.lua")
#+END_SRC

* VARIABLES
Here I have set some variables so that you can set your default programs. If some of you guys want to install the Brave Web Browser, do it with my [[https://brave.com/gek146][referral link]] please.

#+BEGIN_SRC lua
my_term = "alacritty"
my_browser = "brave"
my_file_manager = "pcmanfm"
my_markdown = "marktext"
my_music_player = my_term .. " --class cmus,cmus -e cmus"
my_office_suite = "desktopeditors"
my_pdf_reader = "zathura"
my_text_editor = "subl"
my_video_player = "mpv --player-operation-mode=pseudo-gui --vo=gpu"

M = "Mod4"
A = "Mod1"
S = "Shift"
C = "Control"
#+END_SRC

* LAYOUTS
The layouts are how the windows are going to be positioned on the screen.
On the ~awful.layout.layouts~ section you can uncomment the layouts you want to use and comment the ones you dont want to, as a bonus, I have noticed that the order they are written is the same order they will cycle when you are changing them on the go (by pressing the keybinding).

#+BEGIN_SRC lua
awful.layout.layouts = {
    -- awful.layout.suit.corner.ne,
    -- awful.layout.suit.corner.se,
    -- awful.layout.suit.corner.sw,
    -- awful.layout.suit.corner.nw,
    -- awful.layout.suit.fair,
    -- awful.layout.suit.fair.horizontal,
    -- awful.layout.suit.magnifier,
    -- awful.layout.suit.max.fullscreen,
    -- awful.layout.suit.spiral,
    -- awful.layout.suit.spiral.dwindle,
    -- awful.layout.suit.tile.bottom,
    -- awful.layout.suit.tile.left,
    -- awful.layout.suit.tile.top,
    awful.layout.suit.floating,
    awful.layout.suit.max,
    awful.layout.suit.tile,
}
#+END_SRC

* RIGHT-CLICK MENU
If you have worked before with openbox you'll remember that nice right-click menu that was available for you to launch applications.
Awesomewm has a right-click menu as well, and the best part: you don't have to mess around with XML to configure it. I have not configured it extensively since I seldom use it.

#+BEGIN_SRC lua
myawesomemenu = {
    {
        "hotkeys",
        function() hotkeys_popup.show_help(nil, awful.screen.focused()) end,
    },
    {"manual", my_term .. " -e man awesome"},
    {"edit config", my_term .. " -e nvim " .. awesome.conffile},
    {"restart", awesome.restart},
    {"quit", function() awesome.quit() end},
}

mymainmenu = awful.menu({
    items = {
        {"awesome", myawesomemenu, beautiful.awesome_icon},
        {"open terminal", my_term},
    },
})
#+END_SRC

* WIBOX
The wibox is the bar that holds various widgets. I have find it extremely configurable to the point that it's almost overwhelming.

** CONFIGURATION FOR BASE WIDGETS
The base widgets are the taglist (that shows you the workspaces) and the tasklist (which shows you the active windows on the corresponding tag).
I have left the default setup since I found nothing to modify.

The wallpaper is also set for each connected screen, if you want to change the image, do it in the ~themes.lua~ file.

#+BEGIN_SRC lua
local taglist_buttons = gears.table.join(
    awful.button({}, 1, function(t) t:view_only() end),
    awful.button({M}, 1, function(t)
        if client.focus then client.focus:move_to_tag(t) end 
    end),
    awful.button({}, 3, awful.tag.viewtoggle),
    awful.button({M}, 3, function(t)
        if client.focus then client.focus:toggle_tag(t) end
    end),
    awful.button({}, 4, function(t) awful.tag.viewnext(t.screen) end),
    awful.button({}, 5, function(t) awful.tag.viewprev(t.screen) end))

local tasklist_buttons = gears.table.join(
    awful.button({}, 1, function(c)
        if c == client.focus then
            c.minimized = true
        else
            c:emit_signal("request::activate", "tasklist", {raise = true})
        end
    end),
    awful.button({}, 3, function()
        awful.menu.client_list({theme = {width = 250}})
    end),
    awful.button({}, 4, function() awful.client.focus.byidx(1) end),
    awful.button({}, 5,function() awful.client.focus.byidx(-1) end))

local function set_wallpaper(s)
    if beautiful.wallpaper then
        local wallpaper = beautiful.wallpaper
        if type(wallpaper) == "function" then wallpaper = wallpaper(s) end
        gears.wallpaper.maximized(wallpaper, s, true)
    end
end

screen.connect_signal("property::geometry", set_wallpaper)

awful.screen.connect_for_each_screen(
    function(s)
        set_wallpaper(s)
#+END_SRC

** TAG NAMES
Awesomewm call them tags, but they are (IMO) the same as workspaces. Here you can change their names and set their default layouts. *Make sure to NOT change the indentation as it may cause problems*.

In awesomewm each screen has their on set of workspaces, that means that if you set 8 workspaces and have 2 screens, you will end up having 16 workspaces. This is something that I tend to dislike about awesomewm since I prefer to have shared workspaces among all my screens, which is the Qtile/XMonad/Spectrwm approach.

#+BEGIN_SRC lua
        local names = {"web", "dev", "sys", "doc",
                       "chat", "game", "media", "gfx"}
        local l = awful.layout.suit -- Just to save some typing: use an alias.
        local layouts = {l.max, l.tile, l.tile, l.tile,
                         l.max, l.floating, l.max, l.floating}
        awful.tag(names, s, layouts)
#+END_SRC

** LAYOUT BOX AND MISC WIDGETS
The layoutbox will tell you which layout is active on the tag you are on.

I wanted to set widgets for information that I tend to be interested about my computer, like the RAM usage, the volume level, the battery level and all that.
Searching through documentation about the built-in widgets I found none about what I wanted. I saw that there are some projects like [[https://github.com/vicious-widgets/vicious][Vicious]] that do these kind of widgets but it's an extra dependency that I don't want to (and neither I want you to) deal with.

So in my search to build this widgets myself I found the ~watch~ widget. You just have to write a shell script that will output the info you want in your bar, and you can set the refresh time per widget, you can even set mouse callbacks per widget which is quite awesome (not intended haha). All of my scripts are on the ~widgets~ folder, feel free to look at them, modify them, or add new ones.

#+BEGIN_SRC lua
        s.mylayoutbox = awful.widget.layoutbox(s)
        s.mylayoutbox:buttons(
            gears.table.join(
                awful.button({}, 1, function() awful.layout.inc(1) end),
                awful.button({}, 3, function() awful.layout.inc(-1) end),
                awful.button({}, 4, function() awful.layout.inc(1) end),
                awful.button({}, 5, function() awful.layout.inc(-1) end)))

        s.mytaglist = awful.widget.taglist {
            screen = s,
            filter = awful.widget.taglist.filter.all,
            buttons = taglist_buttons,
        }

        s.mytasklist = awful.widget.tasklist {
            screen = s,
            filter = awful.widget.tasklist.filter.currenttags,
            buttons = tasklist_buttons,
        }

        s.start = wibox.widget {
            markup = "<span foreground='" .. beautiful.colour_blue 
                .. "'> Óò† </span>",
            widget = wibox.widget.textbox,
        }

        s.start:buttons(
            gears.table.join(
                awful.button({}, 1, function()
                    awful.spawn.easy_async("rofi -show drun", function() end)
                end),
                awful.button({}, 3, function()
                    awful.spawn.easy_async("rofi -show run", function() end)
                end)))

        s.weather = awful.widget.watch(
            gears.filesystem.get_configuration_dir()
                .. "/widgets/weather.sh Cedro+Salazar", 300,
            function(widget, stdout)
                widget:set_markup_silently(
                    "<span foreground='" .. beautiful.colour_red .. "'>"
                        .. stdout .. "</span>")
            end)

        s.weather:buttons(
            gears.table.join(
                awful.button({}, 1, function()
                    awful.spawn.easy_async(my_browser
                        .. " wttr.in", function() end)
                end)))

        s.memory = awful.widget.watch(
            gears.filesystem.get_configuration_dir()
                .. "/widgets/memory.sh", 2,
            function(widget, stdout)
                widget:set_markup_silently(
                    "<span foreground='" .. beautiful.colour_green .. "'>Ô¨ô  "
                        .. stdout .. "</span>")
            end)

        s.memory:buttons(
            gears.table.join(
                awful.button({}, 1, function()
                    awful.spawn.easy_async(my_term
                        .. " -e gotop", function() end)
                end)))

        s.updates = awful.widget.watch(
            gears.filesystem.get_configuration_dir()
                .. "/widgets/updates.sh", 900,
            function(widget, stdout)
                widget:set_markup_silently(
                    "<span foreground='" .. beautiful.colour_yellow .. "'>Ô£ï  "
                        .. stdout .. "</span>")
            end)

        s.updates:buttons(
            gears.table.join(
                awful.button({}, 1, function()
                    awful.spawn.easy_async(
                        "pkexec /usr/bin/pacman -Syu --noconfirm --needed",
                        function() end)
                end),
                awful.button({}, 3, function()
                    awful.spawn.easy_async(
                        gears.filesystem.get_configuration_dir()
                            .. "check_updates.sh", function() end)
                end)))

        s.volume = awful.widget.watch(
            gears.filesystem.get_configuration_dir()
                .. "/widgets/volume.sh", 0.2,
            function(widget, stdout)
                widget:set_markup_silently(
                    "<span foreground='" .. beautiful.colour_blue .. "'>"
                        .. stdout .. "</span>")
            end)

        s.volume:buttons(
            gears.table.join(
                awful.button({}, 1, function()
                    awful.spawn.easy_async("pamixer -t", function() end)
                end),
                awful.button({}, 3, function()
                    awful.spawn.easy_async("pavucontrol", function() end)
                end),
                awful.button({}, 4, function()
                    awful.spawn.easy_async("pamixer -u -i 5", function() end)
                end),
                awful.button({}, 5, function()
                    awful.spawn.easy_async("pamixer -u -d 5", function() end)
                end)))

        s.brightness = awful.widget.watch(
            gears.filesystem.get_configuration_dir()
                .. "/widgets/brightness.sh", 0.2,
            function(widget, stdout)
                widget:set_markup_silently(
                    "<span foreground='" .. beautiful.colour_red .. "'>"
                        .. stdout .. "</span>")
            end)

        s.brightness:buttons(
            gears.table.join(
                awful.button({}, 4, function()
                    awful.spawn.easy_async(
                        "brightnessctl set 10%+", function() end)
                end),
                awful.button({}, 5, function()
                    awful.spawn.easy_async(
                        "brightnessctl set 10%-", function() end)
                end)))

        s.sep = wibox.widget {
            markup = "<span foreground='" .. beautiful.colour_grey 
                .. "'> ‚îÇ </span>",
            widget = wibox.widget.textbox,
        }

        s.battery = awful.widget.watch(
            gears.filesystem.get_configuration_dir()
                .. "/widgets/battery.sh", 30,
            function(widget, stdout)
                widget:set_markup_silently(
                    "<span foreground='" .. beautiful.colour_purple .. "'>"
                        .. stdout .. "</span>")
            end)

        s.clock = wibox.widget {
            format = "<span foreground='" .. beautiful.colour_cyan .. "'>"
                .. "ÔóØ  %a %b %d  %I:%M %P    " .. "</span>",
            widget = wibox.widget.textclock,
        }
#+END_SRC

** CREATE THE BAR
Now it's time to put every single widget that we have set up into existing visually in our screen.

First, change the ~position~ variable to bottom if you prefer a bottom bar. You can change the order in which the widgets will appear by reordering their name up or down in their respective sections.

#+BEGIN_SRC lua
        s.mywibox = awful.wibar({position = "top", screen = s})

        s.mywibox:setup{
            layout = wibox.layout.align.horizontal,
            { -- Left widgets
                layout = wibox.layout.fixed.horizontal,
                s.start,
                s.sep,
                s.mytaglist,
                s.sep,
                s.mylayoutbox,
                wibox.widget.systray(),
                s.sep,
            },
            s.mytasklist, -- Middle widget
            { -- Right widgets
                layout = wibox.layout.fixed.horizontal,
                s.brightness,
                s.sep,
                s.memory,
                s.sep,
                s.updates,
                s.sep,
                s.volume,
                s.sep,
                s.battery,
                s.sep,
                s.clock,
            },
        }
    end)
#+END_SRC

* KEYBINDINGS
In awesomewm I have implemented all of my [[https://github.com/david35mm/.files/tree/main/.config/qtile#keybindings][Qtile keybindings]], this is to have uniformity on all of the window managers I use.
You can take a quick look of all the keybindings while in awesomewm by hitting ~Windows + b~

I'll leave some tables here to let you know the active keybindings and what they do.
*Important:* I like to use the Windows key as the Mod key (which in the config file is known as ~M~).
If for some weird reason you are one of those persons who likes to use the Alt key instead of the Windows key, change the ~{M}~ for ~{A}~ where you see fit, even though you will have to change a lot of keybindings that already use Alt.

** MOUSE BINDINGS
These are useful when you have a floating window that you want to resize or move around as you would on a normal floating window manager.

| Keybinding           | Action                 |
|----------------------+------------------------|
| RIGHT-CLICK          | Open right-click menu  |
| SCROLL UP            | Go to next tag         |
| SCROLL DOWN          | Go to previous tag     |
| LEFT-CLICK           | Focus selected window  |
| MODKEY + LEFT-CLICK  | Move selected window   |
| MODKEY + RIGHT-CLICK | Resize selected window |

#+BEGIN_SRC lua
root.buttons(
    gears.table.join(
        awful.button({}, 3, function() mymainmenu:toggle() end),
        awful.button({}, 4, awful.tag.viewnext),
        awful.button({}, 5, awful.tag.viewprev)))
#+END_SRC

** AWESOMEWM CONTROLS
These are actions that have to do with tags, layouts, and windows.

*** GLOBAL
| Keybinding           | Action                      |
|----------------------+-----------------------------|
| MODKEY + CONTROL + r | Restart awesomewm           |
| MODKEY + CONTROL + q | Quit awesomewm              |
| MODKEY + b           | Open keybindings cheatsheet |

*** WINDOW CONTROLS
| Keybinding              | Action                           |
|-------------------------+----------------------------------|
| MODKEY + SHIFT + j      | Swap with previous window        |
| MODKEY + SHIFT + k      | Swap with next window            |
| MODKEY + j              | Focus previous window            |
| MODKEY + k              | Focus next window                |
| MODKEY + u              | Focus urgent window              |
| MODKEY + c              | Minimize window                  |
| MODKEY + SHIFT + c      | Unminimize window                |
| MODKEY + s              | Fullscreen toggle                |
| MODKEY + w              | Close the window                 |
| MODKEY + f              | Floating toggle                  |
| MODKEY + SHIFT + Return | Swap with master window          |
| MODKEY + o              | Move to screen                   |
| MODKEY + m              | (un)maximize window              |
| MODKEY + CONTROL + m    | (un)maximize window vertically   |
| MODKEY + SHIFT + m      | (un)maximize window horizontally |

*** WORKSPACE NAVIGATION
| Keybinding      | Action                   |
|-----------------+--------------------------|
| MODKEY + Left   | Go to previous workspace |
| MODKEY + Right  | Go to next workspace     |
| MODKEY + Escape | Go to last workspace     |

*** LAYOUT CONTROLS
| Keybinding           | Action                             |
|----------------------+------------------------------------|
| MODKEY + CONTROL + h | Add window to the master pane      |
| MODKEY + CONTROL + j | Decrease columns on the slave pane |
| MODKEY + CONTROL + k | Increase columns on the slave pane |
| MODKEY + CONTROL + l | Remove window from the master pane |
| MODKEY + Tab         | Cycle through layouts              |
| MODKEY + h           | Shrink master pane width           |
| MODKEY + l           | Grow master pane width             |

*** MULTI-SCREEN FOCUS
| Keybinding                     | Action                                   |
|--------------------------------+------------------------------------------|
| MODKEY + Comma                 | Focus the previous screen                |
| MODKEY + Period                | Focus the next screen                    |
| MODKEY + 1-9                   | Focus to workspace (1-9)                 |
| MODKEY + CONTROL + 1-9         | Toggle workspace (1-9)                   |
| MODKEY + SHIFT + 1-9           | Send window to workspace (1-9)           |
| MODKEY + SHIFT + CONTROL + 1-9 | Toggle focused client on workspace (1-9) |

** SYSTEM CONTROLS
They have to do with the volume and brightness levels.

| Keybinding            | Action                  |
|-----------------------+-------------------------|
| XF86AudioLowerVolume  | Decrease the volume     |
| XF86AudioMute         | Mute toggle             |
| XF86AudioRaiseVolume  | Increase the volume     |
| XF86MonBrightnessDown | Decrease the brightness |
| XF86MonBrightnessUp   | Increase the brightness |

*Advice*: If for some reason your keyboard doesn't have the brightness control keys, don't worry, I got you. I've set two alternative keybindings to control the brightness through your keyboard:

| Keybinding | Action                  |
|------------+-------------------------|
| ALT + j    | Decrease the brightness |
| ALT + k    | Increase the brightness |

** APPLICATIONS LAUNCHER
I have set some easy to remember keybindings for launching the most used applications I have on my system. Almost all of them begin with ~Windows + Alt~ and then a letter follows it. I selected the letters to be mnemonic (in most cases).

| Keybinding                       | Action                                                       |
|----------------------------------+--------------------------------------------------------------|
| MODKEY + r                       | Run the application launcher ([[https://github.com/davatorium/rofi/blob/next/INSTALL.md][rofi]])                          |
| MODKEY + ALT + r                 | Launch the run prompt                                        |
| ALT + Tab                        | Open the window switcher, like the one on Windows but better |
| MODKEY + RETURN (RETURN = ENTER) | Launch Terminal Emulator ([[https://alacritty.org/][Alacritty]])                         |
| MODKEY + ALT + i                 | Launch Web Browser ([[https://brave.com/gek146][Brave Browser]])                           |
| MODKEY + e                       | Launch File Manager ([[https://wiki.lxde.org/en/PCManFM][PCManFM]])                                |
| MODKEY + ALT + d                 | Launch Markdown Editor ([[https://marktext.app/][Mark Text]])                           |
| MODKEY + ALT + m                 | Launch Music Player ([[https://cmus.github.io/][cmus]])                                   |
| MODKEY + ALT + o                 | Launch Office Suite ([[https://www.onlyoffice.com/download-desktop.aspx][OnlyOffice]])                             |
| MODKEY + ALT + p                 | Launch PDF Reader ([[https://pwmt.org/projects/zathura/][Zathura]])                                  |
| MODKEY + ALT + t                 | Launch Text Editor ([[https://www.sublimetext.com/docs/3/linux_repositories.html][Sublime Text]])                            |
| MODKEY + ALT + v                 | Launch Video Player ([[https://mpv.io/][mpv]])                                    |
| MODKEY + ALT + e                 | Launch Terminal-Based File Manager ([[https://github.com/vifm/vifm][vifm]])                    |
| MODKEY + ALT + s                 | Launch ([[https://www.spotify.com/co/download/linux][Spotify]])                                             |
| MODKEY + ALT + g                 | Launch ([[https://store.steampowered.com/about][Steam]])                                               |

#+BEGIN_SRC lua
globalkeys = gears.table.join(
    awful.key({M, C}, "r",
              awesome.restart,
              {description = "Restart Awesome", group = "Awesome"}),
    awful.key({M, C}, "q",
              awesome.quit,
              {description = "Quit Awesome", group = "Awesome"}),
    awful.key({M}, "b",
              hotkeys_popup.show_help,
              {description = "Open <b>this</b> cheatsheet", group = "Awesome"}),
    awful.key({M, S}, "j",
              function() awful.client.swap.byidx(-1) end,
              {description = "Swap with previous window", group = "Window"}),
    awful.key({M, S}, "k",
              function() awful.client.swap.byidx(1) end,
              {description = "Swap with next window", group = "Window"}),
    awful.key({M}, "j",
              function() awful.client.focus.byidx(-1) end,
              {description = "Focus previous window", group = "Window"}),
    awful.key({M}, "k",
              function() awful.client.focus.byidx(1) end,
              {description = "Focus next window", group = "Window"}),
    awful.key({M}, "u",
              awful.client.urgent.jumpto,
              {description = "Focus urgent window", group = "Window"}),
    awful.key({M, S}, "c",
              function() local c = awful.client.restore()
                if c then c:emit_signal(
                    "request::activate", "key.unminimize", {raise = true})
                end
              end,
              {description = "Unminimize window", group = "Window"}),
    awful.key({M}, "Left",
              awful.tag.viewprev,
              {description = "Go to previous workspace", group = "Workspace"}),
    awful.key({M}, "Right",
              awful.tag.viewnext,
              {description = "Go to next workspace", group = "Workspace"}),
    awful.key({M}, "Escape",
              awful.tag.history.restore,
              {description = "Go to last workspace", group = "Workspace"}),
    awful.key({M, C}, "h",
              function() awful.tag.incnmaster(1, nil, true) end,
              {description = "Add window to the master pane",
               group = "Layout"}),
    awful.key({M, C}, "j",
              function() awful.tag.incncol(-1, nil, true) end,
              {description = "Decrease columns on the slave pane",
               group = "Layout"}),
    awful.key({M, C}, "k",
              function() awful.tag.incncol(1, nil, true) end,
              {description = "Increase columns on the slave pane",
               group = "Layout"}),
    awful.key({M, C}, "l",
              function() awful.tag.incnmaster(-1, nil, true) end,
              {description = "Remove window from the master pane",
               group = "Layout"}),
    awful.key({M}, "Tab",
              function() awful.layout.inc(1) end,
              {description = "Cycle through layouts", group = "Layout"}),
    awful.key({M}, "h",
              function() awful.tag.incmwfact(-0.05) end,
              {description = "Shrink master pane width", group = "Layout"}),
    awful.key({M}, "l",
              function() awful.tag.incmwfact(0.05) end,
              {description = "Grow master pane width", group = "Layout"}),
    awful.key({M}, "Comma",
              function() awful.screen.focus_relative(-1) end,
              {description = "Focus the previous screen", group = "Screen"}),
    awful.key({M}, "Period",
              function() awful.screen.focus_relative(1) end,
              {description = "Focus the next screen", group = "Screen"}),
    awful.key({}, "XF86AudioLowerVolume",
              function() awful.spawn("pamixer -u -d 5") end,
              {description = "Decrease the volume", group = "System"}),
    awful.key({}, "XF86AudioMute",
              function() awful.spawn("pamixer -t") end,
              {description = "Mute toggle", group = "System"}),
    awful.key({}, "XF86AudioRaiseVolume",
              function() awful.spawn("pamixer -u -i 5") end,
              {description = "Increase the volume", group = "System"}),
    awful.key({}, "XF86MonBrightnessDown",
             function() awful.spawn("brightnessctl set 10%-") end,
             {description = "Decrease the brightness", group = "System"}),
    awful.key({}, "XF86MonBrightnessUp",
              function() awful.spawn("brightnessctl set 10%+") end,
              {description = "Increase the brightness", group = "System"}),
    awful.key({A}, "j",
              function() awful.spawn("brightnessctl set 10%-") end,
              {description = "Decrease the brightness", group = "System"}),
    awful.key({A}, "k",
              function() awful.spawn("brightnessctl set 10%+") end,
              {description = "Increase the brightness", group = "System"}),
    awful.key({M}, "r",
              function() awful.spawn("rofi -show drun") end,
              {description = "Run the application launcher",
               group = "Launcher"}),
    awful.key({M, A}, "r",
              function() awful.spawn("rofi -show run") end,
              {description = "Launch the run prompt", group = "Launcher"}),
    awful.key({A}, "Tab",
              function() awful.spawn("rofi -show window") end,
              {description = "Open the window switcher", group = "Launcher"}),
    awful.key({M}, "Return",
              function() awful.spawn(my_term) end,
              {description = "Launch " .. my_term, group = "Programs"}),
    awful.key({M, A}, "i",
              function() awful.spawn(my_browser) end,
              {description = "Launch " .. my_browser, group = "Programs"}),
    awful.key({M}, "e",
              function() awful.spawn(my_file_manager) end,
              {description = "Launch " .. my_file_manager, group = "Programs"}),
    awful.key({M, A}, "d",
              function() awful.spawn(my_markdown) end,
              {description = "Launch " .. my_markdown, group = "Programs"}),
    awful.key({M, A}, "m",
              function() awful.spawn(my_music_player) end,
              {description = "Launch " .. my_music_player, group = "Programs"}),
    awful.key({M, A}, "o",
              function() awful.spawn(my_office_suite) end,
              {description = "Launch " .. my_office_suite, group = "Programs"}),
    awful.key({M, A}, "p",
              function() awful.spawn(my_pdf_reader) end,
              {description = "Launch " .. my_pdf_reader, group = "Programs"}),
    awful.key({M, A}, "t",
              function() awful.spawn(my_text_editor) end,
              {description = "Launch " .. my_text_editor, group = "Programs"}),
    awful.key({M, A}, "v",
              function() awful.spawn(my_video_player) end,
              {description = "Launch " .. my_video_player, group = "Programs"}),
    awful.key({M, A}, "e",
              function() awful.spawn(my_term .. " -e vifm") end,
              {description = "Launch " .. my_term .. " -e vifm",
               group = "Programs"}),
    awful.key({M, A}, "s",
              function() awful.spawn("spotify") end,
              {description = "Launch Spotify", group = "Programs"}),
    awful.key({M, A}, "g",
              function() awful.spawn("steam") end,
              {description = "Launch Steam", group = "Programs"}))

clientkeys = gears.table.join(
    awful.key({M}, "s",
              function(c) c.fullscreen = not c.fullscreen c:raise() end,
              {description = "Fullscreen toggle", group = "Window"}),
    awful.key({M}, "w",
              function(c) c:kill() end,
              {description = "Close the window", group = "Window"}),
    awful.key({M}, "f",
              awful.client.floating.toggle,
              {description = "Floating toggle", group = "Window"}),
    awful.key({M, S}, "Return",
              function(c) c:swap(awful.client.getmaster()) end,
              {description = "Swap with master window", group = "Window"}),
    awful.key({M}, "o",
              function(c) c:move_to_screen() end,
              {description = "Move to screen", group = "Window"}),
    awful.key({M}, "c",
              function(c) c.minimized = true end,
              {description = "Minimize window", group = "Window"}),
    awful.key({M}, "m",
              function(c) c.maximized = not c.maximized c:raise() end,
              {description = "(un)maximize window", group = "Window"}),
    awful.key({M, C}, "m",
              function(c)
                c.maximized_vertical = not c.maximized_vertical
                c:raise()
              end,
              {description = "(un)maximize window vertically",
               group = "Window"}),
    awful.key({M, S}, "m",
              function(c)
                c.maximized_horizontal = not c.maximized_horizontal
                c:raise()
              end,
              {description = "(un)maximize window horizontally",
               group = "Window"}))

for i = 1, 9 do
    -- Hack to only show tags 1 and 9 in the shortcut window (mod+b)
    local descr_view, descr_toggle, descr_move, descr_toggle_focus
    if i == 1 or i == 9 then
        descr_view = {description = "Focus to workspace #", group = "Workspace"}
        descr_toggle = {description = "Toggle workspace #", group = "Workspace"}
        descr_move = {
            description = "Send window to workspace #",
            group = "Workspace",
        }
        descr_toggle_focus = {
            description = "Toggle focused client on workspace #",
            group = "Workspace",
        }
    end
    globalkeys = gears.table.join(
        globalkeys,
        awful.key({M}, "#" .. i + 9,
                  function()
                    local screen = awful.screen.focused()
                    local tag = screen.tags[i]
                    if tag then tag:view_only() end
                  end, descr_view),
        awful.key({M, C}, "#" .. i + 9,
                  function()
                    local screen = awful.screen.focused()
                    local tag = screen.tags[i]
                    if tag then awful.tag.viewtoggle(tag) end
                  end, descr_toggle),
        awful.key({M, S}, "#" .. i + 9,
                  function()
                    if client.focus then
                        local tag = client.focus.screen.tags[i]
                        if tag then client.focus:move_to_tag(tag) end
                    end
                  end, descr_move),
        awful.key({M, C, S}, "#" .. i + 9,
                  function()
                    if client.focus then
                        local tag = client.focus.screen.tags[i]
                        if tag then client.focus:toggle_tag(tag) end
                    end
                  end, descr_toggle_focus))
end

clientbuttons = gears.table.join(
    awful.button({}, 1,
                 function(c)
                    c:emit_signal("request::activate",
                                  "mouse_click",
                                  {raise = true})
                 end),
    awful.button({M}, 1,
                 function(c)
                    c:emit_signal("request::activate",
                                  "mouse_click",
                                  {raise = true})
                    awful.mouse.client.move(c)
                 end),
    awful.button({M}, 3,
                 function(c)
                    c:emit_signal("request::activate",
                                  "mouse_click",
                                  {raise = true})
                    awful.mouse.client.resize(c)
                 end))

root.keys(globalkeys)
#+END_SRC

* RULES
There are some windows that you want to always be floating. For example, when you click on a download button on your web browser you want that download dialog (the one that ask where to save the file) to be floating, or when you are moving files you want that little pop-up window that shows you the progress of the operation to be little and not be all weird and take all your screen.

There are also other rules to open certain windows on a respective workplace. e.g. When you open your web browser you probably want to open it on the ~web~ workspace even if you are not there when you launch the program. I have set some "sane" defaults but as with everything, you are free to change them.

To add more rules run ~xprop WM_CLASS~ and click on the window you are interested on knowing its properties.

#+BEGIN_SRC lua
awful.rules.rules = {
    {
        rule = {},
        properties = {
            border_width = beautiful.border_width,
            border_color = beautiful.border_normal,
            focus = awful.client.focus.filter,
            raise = true,
            keys = clientkeys,
            buttons = clientbuttons,
            screen = awful.screen.preferred,
            placement = awful.placement.no_overlap
                + awful.placement.no_offscreen,
            size_hints_honor = false,
        },
    },
    {
        rule_any = {
            class = {
                "Arandr", "Blueman-adapters", "Blueman-manager", "confirm",
                "confirmreset", "dialog", "download", "error", "file_progress",
                "Gnome-screenshot", "makebranch", "maketag", "notification",
                "Pavucontrol", "splash", "ssh-askpass", "toolbar",
            },
            role = {"utility", "notificion", "toolbar", "splash", "dialog"},
            name = {"Authentication", "branchdialog", "pinentry"},
        },
        properties = {floating = true},
    },
    {
        rule_any = {class = {"Brave-browser", "Min"}},
        properties = {maximized = true, tag = "web"},
    },
    {
        rule_any = {class = {"Emacs", "jetbrains-idea", "Sublime_text"}},
        properties = {tag = "dev"},
    },
    {
        rule_any = {class = {"Lxappearance", "Nitrogen"}},
        properties = {tag = "sys"},
    },
    {
        rule_any = {class = {"DesktopEditors", "marktext", "Zathura"}},
        properties = {tag = "doc"},
    },
    {
        rule_any = {class = {"TelegramDesktop"}}, properties = {tag = "chat"},
    },
    {
        rule_any = {class = {"cmus", "Geeqie", "mpv"}, name = {"Celluloid"}},
        properties = {tag = "media"},
    },
}
#+END_SRC

* SIGNALS
These are some signal functions to execute when a new client appears. I have not played with this settings so they are the same as the awesomewm default config.

#+BEGIN_SRC lua
client.connect_signal(
    "manage", function(c)
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- if not awesome.startup then awful.client.setslave(c) end
        if awesome.startup and not c.size_hints.user_position
            and not c.size_hints.program_position then
            awful.placement.no_offscreen(c)
        end
    end)

-- Enable sloppy focus, so that focus follows mouse.
client.connect_signal(
    "mouse::enter", function(c)
        c:emit_signal("request::activate", "mouse_enter", {raise = false})
    end)

function border_adjust(c)
    if c.maximized then -- no borders if only 1 client visible
        c.border_width = 0
    elseif #awful.screen.focused().clients > 1 then
        c.border_width = beautiful.border_width
        c.border_color = beautiful.border_focus
    end
end

client.connect_signal("focus", border_adjust)
client.connect_signal("property::maximized", border_adjust)
client.connect_signal(
    "unfocus", function(c) c.border_color = beautiful.border_normal end)
#+END_SRC

* AUTOSTART
I have programs that I want to always start automatically with awesomewm. You'll see pipewire here but commonly you wouldn't have to start it this way, I do it because systemd is not my init system and that means pipewire is not started at OS boot (which is the normal thing).

I have set the ~easy_async~ option in order to not slow down the whole start process.

#+BEGIN_SRC lua
-- awful.spawn.easy_async("emacs --daemon", function() end)
awful.spawn.easy_async("lxpolkit", function() end)
awful.spawn.easy_async("picom -b", function() end)
awful.spawn.easy_async("pipewire", function() end)
awful.spawn.easy_async("pipewire-pulse", function() end)
awful.spawn.easy_async("pipewire-media-session", function() end)
awful.spawn.easy_async("udiskie -asn -f pcmanfm", function() end)
#+END_SRC
